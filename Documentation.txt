
Requirements:
---------------------

Microsoft Visual Studio 2022 for Windows: 
https://visualstudio.microsoft.com/vs/community/

Microsoft Visual Studio 2022 for MacOS (Preview): 
https://visualstudio.microsoft.com/vs/mac/preview/

Azure Cosmos Db Emulator for Windows: 
https://learn.microsoft.com/en-us/azure/cosmos-db/local-emulator?tabs=ssl-netstd21

Azure Cosmos Db Emulator as a Docker Image for Linux:
https://learn.microsoft.com/en-us/azure/cosmos-db/docker-emulator-linux?tabs=sql-api%2Cssl-netstd21

Azure Functions Core Tools v4.x
https://learn.microsoft.com/en-us/azure/azure-functions/functions-run-local?tabs=windows%2Cportal%2Cv2%2Cbash&pivots=programming-language-csharp#v2

Azure Storage Explorer for Windows & macOS:
https://azure.microsoft.com/en-us/products/storage/storage-explorer/#overview

Azure Storage Emulator and Azurite 
https://learn.microsoft.com/en-us/azure/storage/common/storage-use-azurite?tabs=visual-studio


Step 1:
--------
Add new file Azure Fucntions, with name ListWallets
in this file you see the function name and async tasks, this uses http trigger and can perform 
get, post and also we have route where we can specify the route url

the following are the input bindings

for http triggers it is 
[HttpTrigger(AuthorizationLevel.Function, "get", "post", Route = null)] HttpRequest req)

for timer trigger it is
HttpTrigger(AuthorizationLevel.Function, "get", "post", Route = null)]

for queue triggers it is
[QueueTrigger(AuthorizationLevel.Function, "get", "post", Route = null)] string message)

you can also add output bindings
[HttpTrigger(AuthorizationLevel.Function, "get", "post", Route = null)] HttpRequest req [CosmosDb] out dynamix obj)
and create an obj in the code like

obj = new 
{ id = Guid.NewGuid(), Name = "test"
}

We can have multiple output bindings but only single input bindings

links to refer:
https://learn.microsoft.com/en-us/azure/azure-functions/functions-host-json
https://learn.microsoft.com/en-us/azure/azure-functions/



In host.jsaon
we add all the setting or configurations we need

day 3:
------------------------------------------------------------
we create class library project "JVKExpensesTraker.Shared" to communicate between server and client

we add 3 folder
DTO, Respomses, Validators

DTOs are used for transferring data between the server and client, 
validators are used to validate the data being transferred, 
and responses provide feedback and information from the server to the client. 
These components together enhance the reliability, consistency, and maintainability 
of the communication process in a class library.


now we add reference to Server project
open dependencies in server project  --> right click then add reference, select Class library project then OK

 in Server folder create new project JVKExpensesTracker.Server.Data with class library
 this is used for data layer and repositories
 then add this project also to the project refernece in dependcies of  the Server.Functions project

 Add 3 folders to the Server.Data project
 Interfaces, Models , Repositories


 day 4:
 --------------------------------------
 open cosmos db emulator and in the explore create a new database with name ExpensesTrackerDb
 and then new container with name Wallets, and partition key /userid
 this parttition is used to distribute data sources and should be easily identifiable for the container name
 eg: conatiner wallets has userid which will be unique



 now we need to add Dependency injection to the azure function project
 on the Server.Functions --> nuget packege 
 --> Microsoft.Azure.Fucntions.Extensions
 --> microsoft.extensions.dependencyInjection

 we will add the startup.cs class to our Azure Functions project 
 so we can have the ability to register our services 
 using the dependency injection container supported in .NET 6.0.

Setup Cosmos Db SDK and Register the Cosmos Client Instance in DI Container
------------------------------------------------------------------------------
NuGet Package
Microsoft.Azure.Cosmos

we need to inject azure cosmos db client in 
microsoft recommends to inject that instance as a singleton

so, we create a new class DependencyInjectionExtensions.cs
we will create a cosmosdb service as sigleton and use across the whole application

The IServiceCollection interface represents a container for registering and resolving services 
that can be used throughout an application. It provides methods to register different types of 
services, such as transient, scoped, and singleton services.


namespace JVKExpensesTracker.Server.Data
{
    public static class DependencyInjectionExtensions
    {
        public static void AddCosmosDbClient(this IServiceCollection services, string connectionString)
        {
            services.AddSingleton(sp => new CosmosClient(connectionString));
        }
    }
}

over here cosmosdbclient is created and used across the whole aplications, for this we need Iservicecollection

-------------------------------------------------------------
day 5:
in startup.cs

we add cosmos service
public override void Configure(IFunctionsHostBuilder builder)
        {
            var confi = builder.GetContext().Configuration;

            builder.Services.AddCosmosDbClient("CosmosDbConnectionstring");
        }

we store all the required confirgutaion in Local.settings.json file
we will load that file using var confi = builder.GetContext().Configuration;

and call CosmosDbConnectionstring

-------------------------------------------------------------
day 6:

we are going to execute our first query for the Azure Cosmos Db and retrieve the Wallets of a user.
First, we will start by creating the Wallet model and then will create the interface and the
repository of the Wallets for Cosmos Db, register the repository in the DI container of the Azure Functions app, and finally test the function and check the retrieved results. 

right now there is no communication between so we create a model

now we serialize the names as names in cosmos are camel case and in class are capitals
so we use json serializer

we add enum of wallet types and move it to new file

we added a new extension for convienece extenrsion  name: ADD new file
we can create new file by using shortcut Swift +F2

create a new interface IWalletRepository

internal interface IWalletRepository
    {
        Task<IEnumerable<Wallet>> ListByUserIdAsync(string userId); 
    }

The code snippet you provided is a method signature in C# programming language. Let's break it down:

    Task: Task is a type representing an asynchronous operation that returns a result. In C#, 
    it is part of the Task Parallel Library (TPL) and is used to perform asynchronous tasks without blocking the main thread.

    IEnumerable<Wallet>: IEnumerable<T> is a generic interface in C# that represents a collection of objects of type T. 
    In this case, the type T is Wallet, which means the method will return a collection of Wallet objects.

    ListByUserIdAsync: This is the name of the method. The "Async" suffix suggests that this method is 
    intended to be used for asynchronous operations.

    (string userId): This is the input parameter of the method. It takes a string parameter named userId, 
    which is likely used to filter the list of wallets based on a specific user.

So, the purpose of this method is to asynchronously retrieve a collection of Wallet objects based on the provided userId. 
The method returns a Task, indicating that the operation is asynchronous, and the result of the operation is an IEnumerable<Wallet>,
which is a collection of Wallet objects.

For conveinece we add a new globalusing.cs file 
we will add all necessary using here for all file

create a new repository 
cosmosWalletrepository.cs
then add it to the dependency injection

 public static class DependencyInjectionExtensions
    {
        public static void AddCosmosDbClient(this IServiceCollection services, string connectionString)
        {
            services.AddSingleton(sp => new CosmosClient(connectionString));
        }

        public static void AddRepositories(this IServiceCollection services)
        {
            services.AddScoped<IWalletRepository, CosmosWalletsRepository>();
        }
    }

In the above program, two extension methods are defined for the IServiceCollection in the context of setting up a Cosmos DB
client and repositories for dependency injection in an ASP.NET Core application.

    AddSingleton:
        services.AddSingleton(sp => new CosmosClient(connectionString));: 
        This line of code adds a singleton instance of CosmosClient to the dependency injection container (IServiceCollection). 
        The singleton lifetime means that there will be only one instance of CosmosClient throughout the lifetime of the 
        application, and every time the CosmosClient is requested, the same instance will be provided. Singleton instances 
        are created once, and subsequent requests will always receive the same instance.

    AddScoped:
        services.AddScoped<IWalletRepository, CosmosWalletsRepository>();: 
        This line of code adds a scoped instance of CosmosWalletsRepository to the dependency injection container 
        (IServiceCollection). The scoped lifetime means that a new instance of CosmosWalletsRepository will be created 
        for each HTTP request coming into the application. During the processing of that request, any further requests
        for the IWalletRepository will receive the same instance. However, different requests will receive different instances.

In the provided code, two extension methods, AddCosmosDbClient and AddRepositories, 
are being added to the dependency injection container (IServiceCollection).
The main purpose of dependency injection is to decouple the components of an application, making them more modular,
testable, and maintainable. By registering services in the dependency injection container,
we allow the container to manage the creation, lifetime, and disposal of these services, 
enabling easy access to them throughout the application.


then we add this service to startup.cs



-------------------------------------------------------------
day 7:

add the missing date properties of the wallet objects first, then will be creating the responses classes that will be used to wrap
the responses of the API Functions, one for the successful result and other for the failure one. 

add 2 new properties to cosmos db 1,creationdate, 2.modificationdate
add them in models wallet.cs class as well

we create a DTO for the client, it means to send thwe data what client exactly needs


in the JVKEXpensesTracker.shared project, in the respones, will create a API response clas

this class will have a Message., ResponseDate, records, which are list of something
these records can be of any time, sometimes wallets, sometines transactions


will create 2 methods that inherit the apireponse
1. apisuccessresponse, 2.apierrorresponse

apisuccessresponse has generic type of type T for the responses

apisuccessresponse method will have constructores with based on parameters 
    public ApiSuccessResponse()
    {
        IsSuccess = true;
    }

    public ApiSuccessResponse(T[]? records)
    {
        Records = records;
    }

    public ApiSuccessResponse(string message, T[]? records)
    {
        Message = message;
        Records = records;
    }

    public ApiSuccessResponse(string message)
    {
        Message = message;
    }

same for apierrorResposne
public class ApiErrorResponse : ApiResponse
{
    public ApiErrorResponse()
    {
        IsSuccess = false;
    }

    public ApiErrorResponse(string message)
    {
        Message = message;
    }
}
The : this() syntax is used here. When the default constructor is invoked, 
it automatically calls another constructor in the same class (ApiErrorResponse(string message) constructor) 
using : this(). This ensures that the IsSuccess property is always set to false whenever an instance 
of ApiErrorResponse is created.

this will mnake sure the above constructor is also happend and issucess is et to default true or false basedon the method called


move them to sepearte classes, by right click and move to their class option
then we'll have 3 different classes 

set repsonsedatetime which we forgot earlier

we change the type from T<> generic to IEnumerable

and change the final return from from wallet to 
return new OkObjectResult(new ApiSuccessResponse<Wallet>($"{wallets.Count()} have been retrieved", wallets)); // should return 200 for now
       
now the response on postman chnegs from giving all records directly from cosmos to 
their api calls, like repsonse date somes under one category and other message and issucess comes as other property with date


-------------------------------------------------------------
day 8:
create the DTOs of the Wallets and will figure it an error that happened in the JSON serialization
and deserialization of the JSON object for the Wallet model, will debug that and get it resolved

we change back the datatype to T, cause sometimes its not a collection, it migt be only omne,
so we add Ieenumerable in the return Listwallets.cs as Ieneumerable<wallet>

















